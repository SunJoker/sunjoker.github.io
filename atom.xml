<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sunjoker.github.io/</id>
    <title>PP&apos;s Blog</title>
    <updated>2019-12-14T03:22:38.109Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sunjoker.github.io/"/>
    <link rel="self" href="https://sunjoker.github.io//atom.xml"/>
    <subtitle>Blog</subtitle>
    <logo>https://sunjoker.github.io//images/avatar.png</logo>
    <icon>https://sunjoker.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, PP&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[MySQL索引]]></title>
        <id>https://sunjoker.github.io//post/mysql-suo-yin</id>
        <link href="https://sunjoker.github.io//post/mysql-suo-yin">
        </link>
        <updated>2019-12-14T03:18:42.000Z</updated>
        <summary type="html"><![CDATA[<p>关于MySQL的一些索引知识...</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于MySQL的一些索引知识...</p>
<!--more-->
<ul>
<li>
<p>MySQL的索引使用B-Tree平衡树</p>
<ul>
<li>聚簇索引 &amp;&amp; 非聚簇索引</li>
<li>聚簇索引：索引的叶节点指向数据</li>
<li>非聚簇索引：索引的叶节点指向数据的引用</li>
<li>聚集索引就是以主键创建的索引</li>
<li>非聚集索引就是以非主键创建的索引</li>
<li>聚集索引在叶子节点存储的是表中的数据</li>
<li>非聚集索引在叶子节点存储的是主键和索引列</li>
<li>使用非聚集索引查询出数据时，拿到叶子上的主键再去查到想要查找的数据。(拿到主键再查找这个过程叫做回表)</li>
<li>非聚集索引也叫做二级索引</li>
<li>myisam使用非聚簇索引，innodb使用聚簇索引</li>
</ul>
</li>
<li>
<p>对于innodb引擎：</p>
<ul>
<li>主键索引既存储索引值，又在叶中存储行数据</li>
<li>如果没有主键，则会使用 unique key 做主键</li>
<li>如果没有unique，则mysql会生成一个rowid做主键</li>
</ul>
</li>
<li>
<p>复合索引由左到右生效</p>
</li>
<li>
<p>or的两边都有存在可用的索引，该语句才能用索引</p>
</li>
<li>
<p>索引命中只能是相等的情况，不能是范围匹配</p>
</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>语句</th>
<th>索引是否发挥作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>where a=3</td>
<td>是，只使用了a</td>
</tr>
<tr>
<td>where a=3 and b=5</td>
<td>是，使用了a,b</td>
</tr>
<tr>
<td>where a=3 and b=5 and c=4</td>
<td>是，使用了a,b,c</td>
</tr>
<tr>
<td>where b=3 or where c=4</td>
<td>否</td>
</tr>
<tr>
<td>where a=3 and c=4</td>
<td>是，仅使用了a</td>
</tr>
<tr>
<td>where a=3 and b&gt;10 and c=7</td>
<td>是，使用了a,b</td>
</tr>
<tr>
<td>where a=3 and b like '%xx%' and c=7</td>
<td>使用了a,b</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java8中Stream的常用操作]]></title>
        <id>https://sunjoker.github.io//post/java8-zhong-stream-de-chang-yong-cao-zuo</id>
        <link href="https://sunjoker.github.io//post/java8-zhong-stream-de-chang-yong-cao-zuo">
        </link>
        <updated>2019-11-29T14:14:27.000Z</updated>
        <summary type="html"><![CDATA[<p>Stream翻译为“流”，是Java8中很常用与便捷的一个类，该篇是对Stream的一些常用方法的总结！</p>
]]></summary>
        <content type="html"><![CDATA[<p>Stream翻译为“流”，是Java8中很常用与便捷的一个类，该篇是对Stream的一些常用方法的总结！</p>
<!-- more -->
<blockquote>
<p>许多对于array、list的操作需要注意数组越界以及边界性的问题</p>
</blockquote>
<h1 id="java-stream">Java Stream</h1>
<h2 id="1-flatmap-map">1. flatMap &amp;&amp; map</h2>
<ul>
<li>map：将List变为流，对每一个元素操作</li>
<li>flatMap：将包含list的list变为流，操作每一个list，再通过map操作每一元素</li>
</ul>
<h3 id="例子1获取所有学生的年龄">例子1（获取所有学生的年龄）</h3>
<pre><code class="language-json">[
    {
        &quot;name&quot;: &quot;小A&quot;,
        &quot;age&quot;: 12
    },
    {
        &quot;name&quot;: &quot;小B&quot;,
        &quot;age&quot;: 13
    }
]
</code></pre>
<pre><code>//伪代码
List&lt;Integer&gt; ages = students.stream().map(Student::getAge).collect(Collectors.toList());
</code></pre>
<h3 id="例子2-获取所有班级的所有学生的年龄">例子2 （获取所有班级的所有学生的年龄）</h3>
<pre><code class="language-json">[
    [
        {
            &quot;name&quot;: &quot;小A&quot;,
            &quot;age&quot;: 12
        },
        {
            &quot;name&quot;: &quot;小B&quot;,
            &quot;age&quot;: 13
        }
    ],
    [
        {
            &quot;name&quot;: &quot;小C&quot;,
            &quot;age&quot;: 11
        },
        {
            &quot;name&quot;: &quot;小D&quot;,
            &quot;age&quot;: 13
        }
    ]
]
</code></pre>
<pre><code>//伪代码
List&lt;Integer&gt; ages = grades.stream().flatMap(grade -&gt; grade.getStudents.stream()).map(Student::getAge)).collect(Collectors.toList());
</code></pre>
<hr>
<h2 id="peek">peek</h2>
<ul>
<li>peek 操作 一般用于不想改变流中元素本身的类型或者只想操作元素的内部状态时</li>
<li>map 则用于改变流中元素本身类型，即从元素中派生出另一种类型的操作</li>
</ul>
<hr>
<h2 id="skip-limit">skip &amp;&amp; limit</h2>
<ul>
<li>它们都是对流进行裁剪的中间方法</li>
<li>skip 操作必须时刻监测流中元素的状态，才能判断是否需要丢弃，所以 skip 属于状态操作</li>
<li>limit 只关心截取的是不是其参数 maxsize （最大区间值），其它毫不关心，一旦达到就立马中断操作返回流，所以 limit 属于一个中断操作</li>
</ul>
<hr>
<h2 id="reduce">reduce</h2>
<ul>
<li>通过入参的Function将list归约成一个值（计算和、差一类的运算）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学一学Junit，多用用]]></title>
        <id>https://sunjoker.github.io//post/xue-yi-xue-junitduo-yong-yong</id>
        <link href="https://sunjoker.github.io//post/xue-yi-xue-junitduo-yong-yong">
        </link>
        <updated>2019-11-16T08:46:22.000Z</updated>
        <summary type="html"><![CDATA[<p>突然想每周至少有点学的，基础、提升都可以，先来学习JUnit。</p>
]]></summary>
        <content type="html"><![CDATA[<p>突然想每周至少有点学的，基础、提升都可以，先来学习JUnit。</p>
<!-- more -->
<blockquote>
<p>什么是JUnit？<br>
JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。</p>
</blockquote>
<hr>
<h3 id="junit基本注解">JUnit基本注解</h3>
<table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@BeforeClass</td>
<td style="text-align:left">在所有测试方法前执行一次</td>
</tr>
<tr>
<td style="text-align:left">@AfterClass</td>
<td style="text-align:left">在所有测试方法后执行一次</td>
</tr>
<tr>
<td style="text-align:left">@Before</td>
<td style="text-align:left">在每个测试方法前执行</td>
</tr>
<tr>
<td style="text-align:left">@After</td>
<td style="text-align:left">在每个测试方法后执行</td>
</tr>
<tr>
<td style="text-align:left">@Test(timeout=10000)</td>
<td style="text-align:left">测试方法执行超过10000ms超时，测试失败</td>
</tr>
<tr>
<td style="text-align:left">@Test(expected=Exception.Class)</td>
<td style="text-align:left">测试时期望获得的异常</td>
</tr>
<tr>
<td style="text-align:left">@Ignore(&quot;not ready yet&quot;)</td>
<td style="text-align:left">执行测试时忽略此方法</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="mockmvc使用">MockMvc使用</h3>
<ul>
<li>
<p>使用MockMvcBuilder创建构建器，构造器有两种实现：</p>
<ul>
<li>StandaloneMockMvcBuilder：独立测试</li>
<li>DefaultMockMvcBuilder集成Web环境测试（此种方式并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）</li>
</ul>
</li>
<li>
<p>集成 Web环境方式：</p>
<ul>
<li>MockMvcBuilders.webAppContextSetup(WebApplicationContext context)：指定WebApplicationContext，将会从该上下文获取相应的控制器并得到相应的MockMvc</li>
</ul>
</li>
<li>
<pre><code class="language-java">  @RunWith(SpringRunner.class)
  @SpringBootTest
  public class UserControllerTest  {
      @Autowired
      private WebApplicationContext webApplicationContext;
      private MockMvc mockMvc;
      @Before
      public void setUp() throws Exception {
          mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
      }
  } 
</code></pre>
</li>
<li>
<p>独立测试方式</p>
<ul>
<li>MockMvcBuilders.standaloneSetup(Object... controllers)：通过参数指定一组控制器，这样就不需要从上下文获取了</li>
</ul>
</li>
<li>
<pre><code class="language-java">  @RunWith(SpringRunner.class)
  @SpringBootTest
  public class UserControllerTest  {
      private MockMvc mockMvc;
      @Before
      public void setUp() throws Exception {
          mockMvc = MockMvcBuilders.standaloneSetup(new UserController()).build();
      } 
  }
</code></pre>
</li>
<li>
<p>带参数</p>
<pre><code class="language-java"> mockMvc.perform(post(&quot;/add&quot;)
        .contentType(MediaType.APPLICATION_JSON)
        .content(JSON.toJSONString(user)))
        .andExpect(status().isOk()).andDo(print()).andReturn()
        .getResponse().getContentAsString();
</code></pre>
</li>
<li>
<p>不带参数</p>
<pre><code class="language-java">    mockMvc.perform(get(&quot;/users&quot;).accept(MediaType.APPLICATION_JSON_UTF8))
        .andExpect(status().isOk())
        .andDo(print())
        .andExpect(content().string(equalTo(&quot;[]&quot;)));
</code></pre>
</li>
<li>
<p>方法解析</p>
<ul>
<li>perform：执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理；</li>
<li>get:声明发送一个get请求的方法。MockHttpServletRequestBuilder get(String urlTemplate, Object... urlVariables)：根据uri模板和uri变量值得到一个GET请求方式的。另外提供了其他的请求的方法，如：post、put、delete等。</li>
<li>andExpect：添加ResultMatcher验证规则，验证控制器执行完成后结果是否正确（对返回的数据进行的判断）；</li>
<li>andDo：添加ResultHandler结果处理器，比如调试时打印结果到控制台（对返回的数据进行的判断）；</li>
<li>andReturn：最后返回相应的MvcResult；然后进行自定义验证/进行下一步的异步处理（对返回的数据进行的判断）；</li>
</ul>
</li>
</ul>
<hr>
<h3 id="断言assert-font-colorred配合font-assertthat">断言：assert <font color="red">配合</font> assertThat</h3>
<hr>
<h3 id="参考资料">参考资料</h3>
<blockquote>
<p><a href="http://tengj.top/2017/12/28/springboot12/">Spring Boot干货系列：（十二）Spring Boot使用单元测试</a><br>
<a href="https://juejin.im/post/5b694ff7e51d4519475f7fbc">SpringBoot junit 测试 controller (MockMvc)</a><br>
<a href="https://www.cnblogs.com/wangcp-2014/p/4967055.html">Junit4中的新断言assertThat的使用方法</a><br>
<a href="https://www.bilibili.com/video/av61660179">小“破”站视频</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL数据库杂记]]></title>
        <id>https://sunjoker.github.io//post/mysql-shu-ju-ku-za-ji</id>
        <link href="https://sunjoker.github.io//post/mysql-shu-ju-ku-za-ji">
        </link>
        <updated>2019-10-18T14:54:54.000Z</updated>
        <summary type="html"><![CDATA[<p>一篇关于MySQL索引和其他琐碎的知识点总结😜</p>
]]></summary>
        <content type="html"><![CDATA[<p>一篇关于MySQL索引和其他琐碎的知识点总结😜</p>
<!-- more -->
<blockquote>
<p>各种各样的小知识点(视频看到最后的总结)🙃</p>
</blockquote>
<ol>
<li>复杂筛选</li>
</ol>
<blockquote>
<p>使用SQL添加筛选条件时，如果筛选条件涉及到分组属性(如：COUNT,MAX,MIN,AVG等)，使用having在group by后做筛选，其他情况使用where。</p>
</blockquote>
<hr>
<ol start="2">
<li>SQL性能分析相关</li>
</ol>
<blockquote>
<p>使用explain进行SQL性能分析时 ，type关键字表示性能，显示查询使用了何种类型：从最好到最差依次是：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</p>
</blockquote>
<hr>
<ol start="3">
<li>如何保证索引的有效性</li>
</ol>
<ul>
<li>全值匹配</li>
<li>最佳左前缀法则</li>
<li>不要在索引列上做任何操作(计算、函数等)</li>
<li>存储引擎不能使用索引中范围条件右边的列</li>
<li>尽量使用覆盖索引的查询，减少<font color=red>select *</font></li>
<li>MySQL在使用<font color=red>!=</font>或<font color=red>&lt;&gt;</font>时，无法使用索引导致全表扫描</li>
<li><font color=red>is null</font>，<font color=red>is not null</font>也无法使用索引</li>
<li>like以通配符开始('%aa...')MySQL索引也会失效，导致全表扫描</li>
<li>字符串不加单引号，索引失效</li>
<li>少用<font color=orange>or</font>，用它来连接时索引会失效</li>
</ul>
<hr>
<ol start="4">
<li>小表驱动大表优化原则(小的数据集驱动大的数据集)🤞</li>
</ol>
<blockquote>
<pre><code>  select * from A where id in (select id from B)  
  等价于  
  for select id from B  
  for select * from A where A.id = B.id    
</code></pre>
</blockquote>
<ul>
<li>
<h3 id="font-colorgreen当b的数据集小于a的数据集时用in优于exists"><font color=green>当B的数据集小于A的数据集时，用in优于exists。</h3>
</li>
</ul>
<blockquote>
<pre><code>  select * from A where exists (select 1 from B where B.id = A.id)  
  等价于  
  for select * from A  
  for select * from B where B.id = A.id
</code></pre>
</blockquote>
<ul>
<li>
<h3 id="当a的数据集小于b的数据集时用exists优于in-font">当A的数据集小于B的数据集时，用exists优于in。</font></h3>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL存储过程]]></title>
        <id>https://sunjoker.github.io//post/mysql-cun-chu-guo-cheng</id>
        <link href="https://sunjoker.github.io//post/mysql-cun-chu-guo-cheng">
        </link>
        <updated>2019-10-04T09:07:27.000Z</updated>
        <summary type="html"><![CDATA[<p>一篇关于MySQL存储过程创建的知识点总结</p>
]]></summary>
        <content type="html"><![CDATA[<p>一篇关于MySQL存储过程创建的知识点总结</p>
<!-- more -->
<blockquote>
<p>关于MySQL的存储过程😇</p>
</blockquote>
<h2 id="创建存储过程">创建存储过程</h2>
<h3 id="语法">语法：</h3>
<pre><code>CREATE PROCEDURE 存储过程名 (参数列表)
BEGIN
    SQL语句主体
END
</code></pre>
<h3 id="参数列表的注意点">参数列表的注意点：</h3>
<pre><code>参数列表的参数有三种格式：IN/OUT/INOUT 参数名 参数类型
- IN-传入参数 
- OUT-传出参数	
- INOUT-既可作为传入参数也可以作为传出参数
</code></pre>
<h3 id="声明局部变量">声明局部变量：</h3>
<pre><code>DECLARE 参数名 数据类型 DEFAULT 默认值
例子：DECLARE m INT DEFAULT 1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://sunjoker.github.io//post/hello-gridea</id>
        <link href="https://sunjoker.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>